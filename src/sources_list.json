[
	{
		"name": "Vidstreaming",
		"developer": "",
		"url": "https://github.com/Michael24884/taiyaki-repos/blob/master/src/sources/vidstreaming.js",
		"version": "1.0.1",
                "language":"English",
		"extraDataTitles": null,
		"imageURL": "https://gogo-stream.com/img/logo_vidstreaming.png",
		"searchTitles": "{ return async function scrapeTitles(title, config, qs, extraData, cheerio, controller) {this.baseUrl = config.baseUrl; this.headers = config.headers; this.hasCloudflare = config.hasCloudflare; const url = this.baseUrl + '/search.html?' + qs.stringify({keyword: title});const response = await fetch(url, { headers: this.headers });const text = await response.text();const $ = cheerio.load(text);return $('li.video-block').toArray().map((e) => {const newTitle = $(e).find('div.picture').find('img[src]').attr('alt');const link = `https://vidstreaming.io${$(e).find('a').attr('href')}`;const image = $(e).find('div.picture').find('img').attr('src'); return { title: newTitle, image, embedLink: link };});} }",
		"scrapeEpisodes": "{ return async function episodes(link, cheerio, controller) { const request = await fetch(link);const text = await request.text();const $ = cheerio.load(text);return $('ul.listing.items.lists > li.video-block').toArray().map((element, _index) => {const epLink = $(element).find('a').attr('href');return `https://vidstreaming.io${epLink}`;}).reverse();} }",
		"scrapeLinks": "{ return async function availableServers(episodeLink, cheerio) {async function _prerender() {const pageData = await fetch(episodeLink);const pageText = await pageData.text();const $ = cheerio.load(pageText);const phpFile = $('div.watch_play').find('div.play-video').find('iframe').attr('src');return `https:${phpFile}`;}const directLink = await _prerender();const documentFetch = await fetch(directLink);const document = await documentFetch.text();const $ = cheerio.load(document);return $('ul.list-server-items').find('li.linkserver').toArray().map((element) => {if ($(element).attr('data-status') == '1') {const _mint = $(element).text().trim();if (_mint === 'Server Hyrax') return;if (_mint === 'Easyload') return;const hostName = $(element).text().trim();let _hostLink = $(element).attr('data-video');if (_hostLink.startsWith('/')) _hostLink = 'https:' + _hostLink;return { server: hostName, link: _hostLink };}});} }",
		"baseUrl": "https://vidstreaming.io",
		"hasCloudflare": false,
		"headers": {
			"user-agent": "Mozilla/5.0 (Macintosh; Intele Max OS X 10_15_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.97 Safari/537.26 OPR/69.0.3686.36",
			"accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9",
			"accept-language": "en-US,en;q=0.9"
		}
	},
	{
		"name": "4Anime",
		"developer": "",
                "language":"English",
		"url": "https://github.com/Michael24884/taiyaki-repos/blob/master/src/sources/vidstreaming.js",
		"version": "1.0.0",
		"imageURL": "https://4anime.to/static/logo.png",
		"extraDataTitles": "asl_active=1&p_asl_data=qtranslate_lang%3D0%26set_intitle%3DNone%26customset%255B%255D%3Danime",
		"searchTitles": "{ return async function scrapeTitles(title, config, qs, extraData, cheerio, controller) { this.baseURL = config.baseUrl; this.headers = config.headers;const url = this.baseURL + '/?' + qs.stringify({s: title});const response = await fetch(url, {headers: this.headers, method: 'POST',body: extraData,});const text = await response.text();const $ = cheerio.load(text);return $('#headerDIV_2 > #headerDIV_95').toArray().map((e) => {const link = $(e).find('a').attr('href');const title = $(e).find('div').text();const image = $(e).find('img').attr('src');return { title, image, embedLink: link };});} }",
		"scrapeEpisodes": "{ return async function scrapeEpisodeFunction(episodeLink, cheerio) {const _response = await (await fetch(episodeLink)).text();const $ = cheerio.load(_response);return $('ul.episodes.range.active > li').toArray().map((e) => {return $(e).find('a').attr('href');});} }",
		"scrapeLinks": "{return async function scrapeSingleHost(episodeLink, cheerio) {const _response = await (await fetch(episodeLink)).text();const $ = cheerio.load(_response);const html = $('div.mirror-footer.cl').find('script').html();const link = RegExp(/href=..([^\\\\]+)/);const match = html.match(link);if (match) return [{ server: 'Custom', link: match[1] }];return [];} }",
		"baseUrl": "https://4anime.to",
		"hasCloudflare": false,
		"headers": {
			"Accept": "text/html,application/xhtml+xml,application/xml;q=0.9;imag/webp,image/apng",
			"User-Agent": "Mozilla/5.0 (Macintosh; Intel Max OS X 10_15_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.97 Safari/537.36 OPR/69.0.3686.36"
		}
	},
	{
		"name": "KimAnime",
		"developer": "",
                "language":"English",
		"baseUrl": "https://kimanime.ru",
		"searchTitles": " { return async function scrapeTitles(title, source, qs, extraData, cheerio) { const param = qs.stringify({ q: title });const _response = await (await fetch(source.baseUrl + \"/?c=search&\" + param)).text();const $ = cheerio.load(_response);return $(\"div.columns2 > div.column\").toArray().map((e) => {const title = $(e).find(\"a\").text().trim();const link = $(e).find(\"a\").attr(\"href\");const image = $(e).find(\"a > img\").attr(\"src\");return {title,embedLink: source.baseUrl + link,image: source.baseUrl + image,};});} }",
		"scrapeEpisodes": "{return async function scrapeEpisodes(episodeLink, cheerio) {const _response = await (await fetch(episodeLink)).text();const $ = cheerio.load(_response);return $(\"tbody > tr\").toArray().map((e) => {const link = $(e).find(\"td\").find(\"a\").attr(\"href\");return \"https://kimanime.ru\" + link;}).reverse();} } ",
		"scrapeLinks": "{ return async function scrapeLinksOnEM(link, cheerio) { const _response = await (await fetch(link)).text(); const $ = cheerio.load(_response); const serverLink = $(\"div.container.has-background-black-bis\").find(\"iframe\").attr(\"src\");return [{ link: serverLink, server: \"BP\" }];} }",
		"hasCloudflare": false,
		"version": "1.0.0",
		"headers": {
			"Accept": "text/html,application/xhtml+xml,application/xml;q=0.9;imag/webp,image/apng",
			"User-Agent": "Mozilla/5.0 (Macintosh; Intel Max OS X 10_15_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.97 Safari/537.36 OPR/69.0.3686.36"
		}
	},
	{
		"name": "AnimePahe",
		"language": "English",
		"developer": "",
		"baseUrl": "https://animepahe.com",
		"version": "1.0.1",
		"extraDataTitles": "",
		"imageURL": null,
		"searchTitles": "{return async function scrapeTitles(title, config, qs, extraData, cheerio) {const _response = await (await fetch(\"https://animepahe.com/api?m=search&l=8&q=\" + title)).json();const { data } = _response; if (data) return data.map((i) => ({title: i.title,image: i.poster,embedLink: i.id,}) ); return []}  }",
		"scrapeEpisodes": "{ return async function scrapeLinks(link) { let hasNextPage = true; let preURL = \"https://animepahe.com/api?m=release&id=\" +link + \"&sort=episode_asc&page=1\"; const box = []; while(hasNextPage) {let url = preURL;const _response = await (await fetch(url)).json();const { data, next_page_url,  } = _response;box.push(data.map((i) => i.anime_id + \"-\" + i.session));if (next_page_url) url = next_page_url;else {hasNextPage = false;break;}} return box;} }",
		"scrapeLinks": "{ return async function availableServers(link, cheerio) { const extraction = link.split(\"-\"); const id = extraction[0], session = extraction[1]; const url = \"https://animepahe.com/api?m=links&id=\" +id+ \"&session=\" +session + \"&p=kwik\";const _response = await (await fetch(url, {headers: {\"Accept\" : \"application/json, text/javascript, */*; q=0.01\"}})).json(); const { data } = _response; const quals = Object.values(data); return quals.map((i) => {const obj = Object.entries(i)[0];const quality = obj[0];const data = obj[1];return { server: quality + \"-kwik\", link: data.kwik };}); } }",
		"headers": {
			"Accept": "application/json, text/javascript, */* q=0.01",
			"Connection": "keep-alive"
		}
	}
]

